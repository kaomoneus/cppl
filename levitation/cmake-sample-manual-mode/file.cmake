macro(subDirList result curdir)
  file(GLOB children ${curdir} ${curdir}/*)
  set(dirlist "")
  foreach(child ${children})
    if(IS_DIRECTORY ${child})
        list(APPEND dirlist ${child})
    endif()
  endforeach()
  list(REMOVE_ITEM dirlist "${curdir}")
  set(${result} ${dirlist})
endmacro()

macro(subDirListMask result curdir mask)
  file(GLOB children ${curdir} ${curdir}/${mask})
  set(dirlist "")
  foreach(child ${children})
    if(IS_DIRECTORY ${child})
        list(APPEND dirlist ${child})
    endif()
  endforeach()
  list(REMOVE_ITEM dirlist "${curdir}")
  set(${result} ${dirlist})
endmacro()

macro(replaceExtension newPathVar oldPath newExtension)
  string(FIND ${oldPath} "." found REVERSE)
  if (NOT (${found} EQUAL -1))
      string(SUBSTRING ${oldPath} 0 "${found}-1" ${newPathVar})
  else()
      set(${newPathVar} ${oldPath})
  endif()

  set(${newPathVar} "${${newPathVar}}.${newExtension}")

endmacro()

macro(setupOutputFile newPathVar sourceFile newExtension)
    replaceExtension(${newPathVar}
        ${sourceFile} ${newExtension}
    )

    replaceParent(${newPathVar}
        ${${newPathVar}}
        ${CMAKE_SOURCE_DIR}
        ${PROJECT_BINARY_DIR}
    )
endmacro()

macro(createSubDirFor file)
    get_filename_component(fileDir ${file} DIRECTORY)
    if(NOT(EXISTS ${fileDir}))
        trace("Creating directory ${fileDir}")
        file(MAKE_DIRECTORY ${fileDir})
    endif()
endmacro()

macro(replaceParent newPathVar oldPath oldParent newParent)
    string(REPLACE ${oldParent} ${newParent} ${newPathVar} ${oldPath} )
endmacro()

macro(filesListMask result curdir mask)
  trace("Looking for ${mask} files in ${curdir}...")
  file(GLOB children ${curdir} ${curdir}/${mask})
  set(dirlist "")
  foreach(child ${children})
    if(NOT (IS_DIRECTORY ${child}))
        trace("Found ${child}")
        list(APPEND dirlist ${child})
    endif()
  endforeach()
  list(REMOVE_ITEM dirlist "${curdir}")
  set(${result} ${${result}} ${dirlist})
endmacro()

macro(subDirListRecursive result curdir)
  set(dirlist "")
  set(dirlist2 "")
  subDirList(dirlist ${curdir})
  list(LENGTH dirlist current)
  list(LENGTH dirlist2 new)
  set(${result} ${dirlist})
  while(NOT (${current} EQUAL ${new}))
      set(dirlist2 "")
      foreach(d ${dirlist})
          if (NOT (${d} STREQUAL ${curdir}) AND
              NOT (${d} STREQUAL ${PROJECT_BINARY_DIR})
          )
              subDirList(newDirList ${d})
              set(dirlist2 ${dirlist2} ${newDirList})
          endif()
      endforeach()
      set(tmp ${dirlist2})
      set(dirlist2 ${dirlist})
      set(dirlist ${tmp})
      list(LENGTH dirlist current)
      list(LENGTH dirlist2 new)
      set(${result} ${${result}} ${dirlist})
  endwhile()
endmacro()

macro(auxSources dir sourcesVar)
    set(newSources "")
    aux_source_directory(${dir} newSources)
    trace("Scanning sources at ${dir}")
    trace("Found sources: ${newSources}")
    set (${sourcesVar} ${${sourcesVar}} ${newSources})
endmacro()