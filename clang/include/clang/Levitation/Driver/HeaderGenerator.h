//===--- HeaderGenerator.h - C++ HeaderGenerator class ----------*- C++ -*-===//
//
// Part of the C++ Levitation Project,
// under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
//  This file contains .h files generator class
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LEVITATION_HEADERGENERATOR_H
#define LLVM_LEVITATION_HEADERGENERATOR_H

#include "llvm/ADT/StringRef.h"
#include "clang/Levitation/Common/File.h"
#include "clang/Levitation/Common/Path.h"
#include "clang/Levitation/Common/SimpleLogger.h"
#include "clang/Levitation/Common/Utility.h"


namespace clang { namespace levitation { namespace tools {

class HeaderGenerator {
  // TODO Levitation: we perhaps need sources root (if source file is relative)
  llvm::StringRef OutDir;
  llvm::StringRef OutputFile;
  llvm::StringRef SourceFile;
  const Paths& Includes;
  const RangesVector& SkippedBytes;
  log::Logger &Log;

public:
  HeaderGenerator(
      llvm::StringRef OutDir,
      llvm::StringRef OutputFile,
      const llvm::StringRef &SourceFile,
      const Paths &Includes,
      const RangesVector &SkippedBytes
  )
  : OutDir(OutDir),
    OutputFile(OutputFile),
    SourceFile(SourceFile),
    Includes(Includes),
    SkippedBytes(SkippedBytes),
    Log(log::Logger::get())
  {}

  InputFile createSourceFile() {
    // return InputFile("$SourcesRoot/$SourceFile")
    llvm_unreachable("not implemented");
  }

  File createOutputFile() {
    // return File("$OutDir/$OutputFile")
    llvm_unreachable("not implemented");
  }

  void diagInFileIOIssues(
      const llvm::StringRef F,
      InputFile::StatusEnum Status
  ) {
    auto &err = Log.error() << "Failed to open file '" << F << "': ";
    switch (Status) {
      case InputFile::HasStreamErrors:
        err << "stream error.";
        break;
      default:
        err << "unknown reason.";
    }
    err << "\n";
  }

  void diagOutFileIOIssues(const llvm::StringRef F, File::StatusEnum Status) {
      auto &err = Log.error() << "Failed to open file '" << F << "': ";

      switch (Status) {
        case File::HasStreamErrors:
          err << "stream error.";
          break;
        case File::FiledToRename:
          err << "temp file created, but failed to rename.";
        case File::FailedToCreateTempFile:
          err << "failed to create temp file.";
          break;
        default:
          err << "unknown reason.";
          break;
      }
      err << "\n";
  }

  void emitHeadComment(llvm::raw_ostream &out) {
    out << "// This file is generated by C++ Levitation driver\n\n";
  }

  void emitAfterIncludesComment(llvm::raw_ostream &out) {
    out << "\n"
        << "// Below follows stripped part of source starting\n"
        << "// from user include directives."
        << "\n";
  }

  void emitIncludes(llvm::raw_ostream &out) {

    out << "// Include other generated headers current file depends on";

    for (const auto &inc : Includes) {
      out << "#include \"" << inc << "\"\n";
    }

    out << "\n";
  }

  bool execute() {
    auto InF = createSourceFile();
    if (auto OpenedSrc = InF.open()) {

      const auto &In = OpenedSrc.getMemoryBuffer();
      const char *InStart = In.getBufferStart();
      size_t InSize = In.getBufferSize();

      auto OutF = createOutputFile();
      if (auto OpenedFile = OutF.open()) {
        auto &out = OpenedFile.getOutputStream();

        emitHeadComment(out);

        emitIncludes(out);

        emitAfterIncludesComment(out);

        size_t start = 0;
        for (const auto &skippedRange : SkippedBytes) {

          size_t writeCount = skippedRange.first - start;
          assert(start + writeCount <= InSize);

          out.write(InStart + start, writeCount);

          start = skippedRange.second;
        }

        size_t writeCount = InSize - start;
        assert(start + writeCount <= In.getBufferSize());

        out.write(InStart + start, writeCount);
      }

      if (OutF.hasErrors()) {
        diagOutFileIOIssues(OutF.getPath(), OutF.getStatus());
      }
    }

    if (InF.hasErrors()) {
      diagInFileIOIssues(InF.getPath(), InF.getStatus());
    }
  }
};

}}}

#endif //LLVM_LEVITATION_HEADERGENERATOR_H
