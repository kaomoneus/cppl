package namespace P1 {
  template<typename T>
  struct A {
    A();
    ~A();
    void f();
    A& operator<<(int);
  };

  extern template class A<char>;

  template<typename T>
  A<T>::A() {
    levitation::Test::context() << "P1::A::A()";
  }

  template<typename T>
  A<T>::~A() {
    levitation::Test::context() << "P1::A::~A()";
  }

  // Fires llvm_unreachable at SemaLevitation.cpp:345
  template<typename T>
  void A<T>::f() {
    levitation::Test::context() << "P1::A::f()";
  }

  template<typename T>
  A<T>& A<T>::operator<<(int) {
    levitation::Test::context() << "P1::A::operator<<(int)";
    return *this;
  }
}
