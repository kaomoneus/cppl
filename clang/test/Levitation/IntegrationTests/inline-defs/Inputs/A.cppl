// CHECK-NOT: return 1111;
// CHECK: protoKeepDefSkip
// CHECK: int keepThisInit = 77777;
// CHECK: return 5555;
// CHECK: int keepThisInit = 88888;
// CHECK-NOT: return 11112222
// CHECK-NOT: return 11111;
// CHECK: static int andThisInitKeepToo = 777777;
// CHECK-NOT: staticField = 123;
// CHECK: staticField = 234;
// CHECK: keepExtern

// Some notes here, why we keep init parts?
// Because it can't go to definition part, and mergable just fine. So keep it.
#public

  class A {
  public:
    static int thisSkip() { return 1111; }
    // some comment here
    static int protoKeepDefSkip();
    int keepThisInit = 77777;
    // static int staticField[];
    static int staticField;
    static int staticField2[];
  };

  template <typename T>
  class AA {
  public:
    static int thisLeave() { return 5555; }
    int keepThisInit = 88888;
    static int staticField;
  };

  int A::protoKeepDefSkip() {
    return 11112222;
  }

  int thisSkipToo() { return 11111; }
  static int andThisInitKeepToo = 777777;

  int m = 123, A::staticField2[] = {1, 2, 3},
  c, d = 123, Pe;

  int A::staticField = 123;

  template<typename T>
  int AA<T>::staticField = 234;
  extern int keepExtern;

  // CHECK: my_int_t
  typedef int my_int_t;

  // CHECK-NOT: return 123123
#define DEF { return 123123 };
  void f() DEF

  // CHECK: !(__x == __y)
  template <class _Tp, class _Allocator>
  inline
  bool
  operator!=(const AA<_Tp>& __x, const AA<_Allocator>& __y)
  {
      return !(__x == __y);
  }

  // CHECK: int a = 345345;
  template<typename _RandomAccessIterator>
  void
  __final_insertion_sort(_RandomAccessIterator __first,
                         _RandomAccessIterator __last)
  {
    int a = 345345;
  }
