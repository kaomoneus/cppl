// Topology is:
//            preamble
//          /    |    \
//         |     B     B
//         |    /     /
//         | [body]  /
//         |  /     /
//         v L     /
//          A     /
//          |    /
//          v   L
//          main
//
// 1. run initial build
// 2.1. update preamble
// 2.2. make sure we rebuild everything in this case
// 2.3. Remove preamble.pch
// 2.4. Make sure it will be recompiled, and rest will be recompiled too.
//
// 3.1. update A.cppl, decl part
// 3.2. make sure that we rebuild only following things:
//    * parse only import for A.cppl
//    * A.decl-ast
//    * A.o
//    * main.o
//    * a.out
// 4.1. update A.cppl, body part
// 4.2. make sure that we rebuild only following things:
//    * parse only import for A.cppl (alas we can't avoid it so far)
//    * A.o
//    * a.out
// 5.1. update B.cppl, decl part
// 5.2. make sure that we rebuild only following things:
//    * parse only import for B.cppl (alas we can't avoid it so far)
//    * B.decl-ast
//    * B.o
//    * A.o
//    * a.out
// 6.1. Remove B.decl-ast
// 6.2. Make sure we got recompiled:
//    * B.decl-ast
//    * B.o
//    * A.o
//    * a.out
// 6.3. Remove B.o
// 6.4. Make sure we got recompiled:
//    * B.o
//    * a.out
// 7.1. Remove a.out
// 7.2. Make sure only LINK stage will be ran.
//
// 8.1. Do nothing against previous state.
// 8.2. Make sure "Nothing to build." warning will be emitted.


// 1. run initial build
// RUN: rm -Rf %T/*
// RUN: cp %S/preamble.hpp.first %S/preamble.hpp
// RUN: cp %S/Inputs/A.cppl.first %S/Inputs/A.cppl
// RUN: cp %S/Inputs/B.cppl.first %S/Inputs/B.cppl
// RUN: cppl -root=%S -buildRoot=%T -preamble=%S/preamble.hpp -lit -o %T/a.out \
// RUN:    | FileCheck %s --check-prefix=CHECK_INITIAL
//
// CHECK_INITIAL-DAG: PARSE IMP {{.*}}A.cppl
// CHECK_INITIAL-DAG: PARSE IMP {{.*}}B.cppl
// CHECK_INITIAL-DAG: PREAMBLE {{.*}}preamble.pch
// CHECK_INITIAL-DAG: BUILD DECL {{.*}}B.cppl,
// CHECK_INITIAL-DAG: BUILD OBJ {{.*}}B.cppl,
// CHECK_INITIAL-DAG: BUILD DECL {{.*}}A.cppl,
// CHECK_INITIAL-DAG: BUILD OBJ {{.*}}A.cppl,
// CHECK_INITIAL-DAG: BUILD OBJ {{.*}}main.cppl,
// CHECK_INITIAL-DAG: LINK

// 2.1. update preamble
// RUN: cp %S/preamble.hpp.second %S/preamble.hpp
// RUN: cppl -root=%S -buildRoot=%T -preamble=%S/preamble.hpp -lit -o %T/a.out \
// RUN:    | FileCheck %s --check-prefix=CHECK_PREAMBLE
// CHECK_PREAMBLE-NOT: PARSE IMP {{.*}}A.cppl
// CHECK_PREAMBLE-NOT: PARSE IMP {{.*}}B.cppl
//
// CHECK_PREAMBLE-DAG: PREAMBLE {{.*}}preamble.pch
// CHECK_PREAMBLE-DAG: BUILD DECL {{.*}}B.cppl,
// CHECK_PREAMBLE-DAG: BUILD OBJ {{.*}}B.cppl,
// CHECK_PREAMBLE-DAG: BUILD DECL {{.*}}A.cppl,
// CHECK_PREAMBLE-DAG: BUILD OBJ {{.*}}A.cppl,
// CHECK_PREAMBLE-DAG: BUILD OBJ {{.*}}main.cppl,
// CHECK_PREAMBLE-DAG: LINK
//

// 2.3. remove preamble.pch
// RUN: rm %T/preamble.pch
// RUN: cppl -root=%S -buildRoot=%T -preamble=%S/preamble.hpp -lit -o %T/a.out \
// RUN:    | FileCheck %s --check-prefix=CHECK_PREAMBLE_RM
// CHECK_PREAMBLE_RM-NOT: PARSE IMP {{.*}}A.cppl
// CHECK_PREAMBLE_RM-NOT: PARSE IMP {{.*}}B.cppl
//
// CHECK_PREAMBLE_RM-DAG: PREAMBLE {{.*}}preamble.pch
// CHECK_PREAMBLE_RM-DAG: BUILD DECL {{.*}}B.cppl,
// CHECK_PREAMBLE_RM-DAG: BUILD OBJ {{.*}}B.cppl,
// CHECK_PREAMBLE_RM-DAG: BUILD DECL {{.*}}A.cppl,
// CHECK_PREAMBLE_RM-DAG: BUILD OBJ {{.*}}A.cppl,
// CHECK_PREAMBLE_RM-DAG: BUILD OBJ {{.*}}main.cppl,
// CHECK_PREAMBLE_RM-DAG: LINK
//


// 3.1. update A.cppl, decl part
// RUN: cp %S/Inputs/A.cppl.new-decl %S/Inputs/A.cppl
// RUN: cppl -root=%S -buildRoot=%T -preamble=%S/preamble.hpp -lit -o %T/a.out \
// RUN:    | FileCheck %s --check-prefix=CHECK_A_DECL
//
// CHECK_A_DECL-NOT: PARSE IMP {{.*}}B.cppl
// CHECK_A_DECL-NOT: PREAMBLE {{.*}}preamble.pch
// CHECK_A_DECL-NOT: BUILD DECL {{.*}}B.cppl,
// CHECK_A_DECL-NOT: BUILD OBJ {{.*}}B.cppl,
//
// CHECK_A_DECL: PARSE IMP {{.*}}A.cppl
// CHECK_A_DECL-DAG: BUILD DECL {{.*}}A.cppl,
// CHECK_A_DECL-DAG: BUILD OBJ {{.*}}A.cppl,
// CHECK_A_DECL-DAG: BUILD OBJ {{.*}}main.cppl,
// CHECK_A_DECL-DAG: LINK


// 4.1. update A.cppl, body part
// RUN: cp %S/Inputs/A.cppl.new-body %S/Inputs/A.cppl
// RUN: cppl -root=%S -buildRoot=%T -preamble=%S/preamble.hpp -lit -o %T/a.out \
// RUN:    | FileCheck %s --check-prefix=CHECK_A_BODY
//
// CHECK_A_BODY-NOT: PREAMBLE {{.*}}preamble.pch
// CHECK_A_BODY-NOT: PARSE IMP {{.*}}B.cppl
// CHECK_A_BODY-NOT: BUILD DECL {{.*}}B.cppl,
// CHECK_A_BODY-NOT: BUILD OBJ {{.*}}B.cppl,
// CHECK_A_BODY-NOT: BUILD OBJ {{.*}}main.cppl,
//
// CHECK_A_BODY: PARSE IMP {{.*}}A.cppl
// CHECK_A_BODY-DAG: BUILD DECL {{.*}}A.cppl,
// CHECK_A_BODY-DAG: BUILD OBJ {{.*}}A.cppl,
// CHECK_A_BODY-DAG: LINK

// 5.1. update B.cppl, decl part
// RUN: cp %S/Inputs/B.cppl.new-decl %S/Inputs/B.cppl
// RUN: cppl -root=%S -buildRoot=%T -preamble=%S/preamble.hpp -lit -o %T/a.out \
// RUN:    | FileCheck %s --check-prefix=CHECK_B
//
// CHECK_B-NOT: PREAMBLE {{.*}}preamble.pch
// CHECK_B-NOT: PARSE IMP {{.*}}A.cppl
// CHECK_B-NOT: BUILD DECL {{.*}}A.cppl,
// CHECK_B-NOT: BUILD OBJ {{.*}}main.cppl,
//
// CHECK_B: PARSE IMP {{.*}}B.cppl
// CHECK_B-DAG: BUILD DECL {{.*}}B.cppl,
// CHECK_B-DAG: BUILD OBJ {{.*}}B.cppl,
// CHECK_B-DAG: BUILD OBJ {{.*}}A.cppl,
// CHECK_B-DAG: LINK

// 6.1. Remove B.decl-ast
// RUN: rm %T/Inputs/B.decl-ast
// RUN: cppl -root=%S -buildRoot=%T -preamble=%S/preamble.hpp -lit -o %T/a.out \
// RUN:    | FileCheck %s --check-prefix=CHECK_DECL_AST_RM
//
// CHECK_DECL_AST_RM-NOT: PREAMBLE {{.*}}preamble.pch
// CHECK_DECL_AST_RM-NOT: PARSE IMP {{.*}}A.cppl
// CHECK_DECL_AST_RM-NOT: PARSE IMP {{.*}}B.cppl
// CHECK_DECL_AST_RM-NOT: BUILD DECL {{.*}}A.cppl,
// CHECK_DECL_AST_RM-NOT: BUILD OBJ {{.*}}B.cppl,
// CHECK_DECL_AST_RM-NOT: BUILD OBJ {{.*}}main.cppl,
//
// CHECK_DECL_AST_RM-DAG: BUILD DECL {{.*}}B.cppl,
// CHECK_DECL_AST_RM-DAG: BUILD OBJ {{.*}}A.cppl,
// CHECK_DECL_AST_RM-DAG: LINK

// 6.3. Remove B.o
// RUN: rm %T/Inputs/B.o
// RUN: cppl -root=%S -buildRoot=%T -preamble=%S/preamble.hpp -lit -o %T/a.out \
// RUN:    | FileCheck %s --check-prefix=CHECK_OBJ_RM
//
// CHECK_OBJ_RM-NOT: PREAMBLE {{.*}}preamble.pch
// CHECK_OBJ_RM-NOT: PARSE IMP {{.*}}A.cppl
// CHECK_OBJ_RM-NOT: PARSE IMP {{.*}}B.cppl
// CHECK_OBJ_RM-NOT: BUILD DECL {{.*}}A.cppl,
// CHECK_OBJ_RM-NOT: BUILD DECL {{.*}}B.cppl,
// CHECK_OBJ_RM-NOT: BUILD OBJ {{.*}}A.cppl,
// CHECK_OBJ_RM-NOT: BUILD OBJ {{.*}}main.cppl,
//
// CHECK_OBJ_RM-DAG: BUILD OBJ {{.*}}B.cppl,
// CHECK_OBJ_RM-DAG: LINK

// 7. Remove a.out
// RUN: rm %T/a.out
// RUN: cppl -root=%S -buildRoot=%T -preamble=%S/preamble.hpp -lit -o %T/a.out \
// RUN:    | FileCheck %s --check-prefix=CHECK_RM_A
//
// CHECK_RM_A: LINK

// 8. Do nothing.
// RUN: cppl -root=%S -buildRoot=%T -preamble=%S/preamble.hpp -lit -o %T/a.out \
// RUN:    | FileCheck %s --check-prefix=CHECK_EMPTY_BUILD
// CHECK_EMPTY_BUILD: Nothing to build.

#import Inputs::A

global {

int main() {
  // TODO Levitation: do we need to check correctness of program?
}

}
