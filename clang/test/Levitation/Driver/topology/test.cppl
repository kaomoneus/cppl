// RUN: rm -Rf %T/*
// RUN: cppl -root=%S -buildRoot=%T -preamble=%S/preamble.hpp -lit -o %T/a.out \
// RUN:    --verbose > %t
// RUN: FileCheck -input-file=%t %s

// RUN: FileCheck -input-file=%t --check-prefix=CHECK-A %s
// RUN: FileCheck -input-file=%t --check-prefix=CHECK-B %s
// RUN: FileCheck -input-file=%t --check-prefix=CHECK-C %s
// RUN: FileCheck -input-file=%t --check-prefix=CHECK-D %s
// RUN: %T/a.out

// CHECK-DAG: BUILD DECL {{.*}}Root.cppl, deps: <empty> -> decl-ast: {{.*}}Root.decl-ast
// CHECK-DAG: BUILD DECL {{.*}}My.cppl, deps: ({{.*}}Root.decl-ast) -> decl-ast: {{.*}}My.decl-ast
// CHECK-DAG: BUILD DECL {{.*}}BodyDep.cppl, deps: ({{.*}}Root.decl-ast, {{.*}}My.decl-ast) -> decl-ast: {{.*}}BodyDep.decl-ast
// CHECK-DAG: BUILD OBJ {{.*}}test.cppl, deps: ({{.*}}Root.decl-ast, {{.*}}My.decl-ast, {{.*}}BodyDep.decl-ast) -> object: {{.*}}test.o
// CHECK-DAG: BUILD OBJ {{.*}}BodyDep.cppl, deps: ({{.*}}Root.decl-ast, {{.*}}My.decl-ast) -> object: {{.*}}BodyDep.o
// CHECK-DAG: BUILD OBJ {{.*}}My.cppl, deps: ({{.*}}Root.decl-ast) -> object: {{.*}}My.o
// CHECK-DAG: BUILD OBJ {{.*}}Root.cppl, deps: <empty> -> object: {{.*}}Root.o
// CHECK-A: LINK objects: {{.*}}Root.o
// CHECK-B: LINK objects: {{.*}}My.o
// CHECK-C: LINK objects: {{.*}}BodyDep.o
// CHECK-D: LINK objects: {{.*}}test.o

#import Inputs::My
#import [bodydep] Inputs::BodyDep
#import Inputs::Root

namespace :: {

int main() {

  with (
    auto TestScope = levitation::Test::context()
        // call Inputs::MyClass::f()
        .expect("Inputs::Root::RootClass::f()")
        .expect("Inputs::My::MyClass::f()")

        // call Inputs::MyClass::m()
        .expect("Inputs::Root::RootClass::f()")
        .expect("Inputs::My::MyClass::m()")

        // call Inputs::BodyDepClass::f()
        .expect("Inputs::Root::RootClass::f()")
        .expect("Inputs::My::MyClass::f()")
        .expect("Inputs::BodyDep::BodyDepClass::f()")
    .open()
  ) {
    Inputs::My::MyClass::f();
    Inputs::My::MyClass::m();
    Inputs::BodyDep::BodyDepClass::f();
  }
  return levitation::Test::result();
}

}